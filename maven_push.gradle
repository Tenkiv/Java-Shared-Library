/*
 * Copyright 2014 Tenkiv, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

// This should only be true if you are wanting to upload your own artifact and have the prerequisite gradle properties.
// This will throw an error if it is flagged as 'true' and those properties are non-existent.
Properties getLocalProperties(){
    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file("local.properties").newDataInputStream())
    return localProperties
}

boolean isRelease() {
    return project.rootProject.file("local.properties").exists() && getLocalProperties().getProperty("release_flag")
}

def isSnapshotBuild() {
    return version.contains("SNAPSHOT") == true
}

uploadArchives {
    if (isRelease()) {
        def localProperties = getLocalProperties()
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                project.version = VERSION_NAME
                project.group = GROUP
                snapshotRepository(url: isSnapshotBuild() ?
                        "https://oss.sonatype.org/content/repositories/snapshots" :
                        mavenLocal().url) {
                    authentication(
                            userName: localProperties.getProperty('sonatype_user'),
                            password: localProperties.getProperty('sonatype_pass'))
                }

                repository(url: isRelease() ?
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2/" :
                        mavenLocal().url) {
                    authentication(
                            userName: localProperties.getProperty('sonatype_user'),
                            password: localProperties.getProperty('sonatype_pass'))
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                            organization POM_DEVELOPER_ORGANIZATION
                            organizationUrl POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                }
            }
        }
    }
}

signing {
    required { isRelease() }
    if (isRelease()) {
        def localProperties = getLocalProperties()
        allprojects { ext."signing.keyId" = localProperties.getProperty('keyId') }
        allprojects { ext."signing.secretKeyRingFile" = localProperties.getProperty('secretKeyRingFile') }
        allprojects { ext."signing.password" = localProperties.getProperty('password') }

        sign configurations.archives
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}